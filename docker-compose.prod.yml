version: '3.8'

services:
  # MySQL 数据库
  database:
    image: mysql:8.0
    container_name: hospital-journal-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - hospital-journal-network
    command: --default-authentication-plugin=mysql_native_password

  # 后端 API 服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hospital-journal-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - DB_PORT=3306
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      - ssl_certs:/app/ssl:ro
    depends_on:
      - database
    networks:
      - hospital-journal-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端 Web 服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: hospital-journal-web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ssl_certs:/etc/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - hospital-journal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: hospital-journal-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - hospital-journal-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  ssl_certs:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local

networks:
  hospital-journal-network:
    driver: bridge